version: '3.8'

services:
  mcp-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: mcp-replit-claude-server
    ports:
      - "3001:3001"
    volumes:
      - ./projects:/app/projects
      - ./server/logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - NODE_ENV=production
      - PORT=3001
      - PROJECTS_DIR=/app/projects
      - CLIENT_URL=http://localhost:3000
      - LOG_LEVEL=info
      - CLAUDE_CODE_AVAILABLE=true
      - CLAUDE_CODE_MAX_SESSIONS=10
      - WEBSOCKET_PORT=3001
    depends_on:
      - redis
    networks:
      - mcp-replit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: mcp-replit-claude-frontend
    ports:
      - "3030:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
      - NEXT_PUBLIC_CLAUDE_CODE_ENABLED=true
    depends_on:
      - mcp-server
    networks:
      - mcp-replit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: mcp-replit-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - mcp-replit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-replit-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mcp-replit-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-replit-grafana
    ports:
      - "3040:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - mcp-replit-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  projects_data:
    driver: local

networks:
  mcp-replit-network:
    driver: bridge
    name: mcp-replit-network